# prefixキーをC-wに変更する
set -g prefix C-a

# C-bのキーバインドを解除する
unbind C-b

# キーストロークのディレイを減らす
set -sg escape-time 1

# ウィンドウのインデックスを1から始める
set -g base-index 1

# ペインのインデックスを1から始める
setw -g pane-base-index 1

# 設定ファイルをリロードする
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# ログインシェルを/usr/local/bin/zshにする
set-option -g default-shell /opt/homebrew/bin/zsh

# ウィンドウ履歴の最大行数
set-option -g history-limit 5000

# C-a*2でtmux内のプログラムにC-aを送る
bind C-a send-prefix

# | でペインを縦に分割する
bind | split-window -h

# - でペインを横に分割する
bind - split-window -v

# Vimのキーバインドでペインを移動する
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# Vimのキーバインドでペインをリサイズする
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Window内のすべてのpaneで同じ操作をする
bind e setw synchronize-panes on
bind E setw synchronize-panes off

# マウス操作を有効にする
setw -g mouse on

# 256色端末を使用する
set -g default-terminal "screen-256color"

# ステータスバーの色を設定する
set -g status-fg white
set -g status-bg black

# ウィンドウリストの色を設定する
setw -g window-status-style bg="default","dim",fg="cyan"

# アクティブなウィンドウを目立たせる
setw -g window-status-current-style bg="red","bright",fg="white"

# ペインボーダーの色を設定する
set -g pane-border-style bg="black",fg="green"

# アクティブなペインを目立たせる
set -g pane-active-border-style bg="yellow",fg="white"

# コマンドラインの色を設定する
set -g message-style bg="black","bright",fg="white"

# ステータスバーを設定する
## 左パネルを設定する
set -g status-left-length 40
set -g status-left "#[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P"
## 右パネルを設定する
set -g status-right "#[fg=cyan][%Y-%m-%d(%a) %H:%M]"
## リフレッシュの間隔を設定する(デフォルト 15秒)
set -g status-interval 60
## ウィンドウリストの位置を中心寄せにする
set -g status-justify centre
## ヴィジュアルノーティフィケーションを有効にする
setw -g monitor-activity on
set -g visual-activity on
## ステータスバーを上部に表示する
set -g status-position top

# コピーモードを設定する
## viのキーバインドを使用する
setw -g mode-keys vi
## クリップボード共有を有効にする
set-option -g default-command "reattach-to-user-namespace -l /opt/homebrew/bin/zsh"
# コピーモード時のキーバインディング
set-window-option -g mode-keys vi

# tmux 2.4以上のとき
bind-key    -T copy-mode-vi v     send-keys -X begin-selection
bind-key    -T copy-mode-vi V     send-keys -X select-line
bind-key    -T copy-mode-vi C-v   send-keys -X rectangle-toggle
bind-key    -T copy-mode-vi y     send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind-key    -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind / list-keys -T copy-mode-vi

# tmux 2.4未満のとき
## コピーモードの操作をvi風に設定する
# bind-key -t vi-copy v begin-selection"
# viコピーモードのキーバインド表示
# bind / list-keys -t vi-copy

## Mac with pbcopy
# bind -T copy-mode-vi y send -X copy-pipeline-and-cancel "reattach-to-user-namespace"
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
# unbind -t vi-copy Enter
## with remote tmux (No operation guarantee)
# bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
#if "which pbcopy"  "bind-key -t vi-copy y copy-pipe 'reattach-to-user-namespace pbcopy'"
#if "which pbcopy"  "bind-key -t vi-copy Enter copy-pipe 'reattach-to-user-namespace pbcopy'"
#if "which pbpaste" "bind-key ] run 'tmux set-buffer -- \"$(pbpaste)\"; tmux paste-buffer'"
# Linux with xsel (No operation guarantee)
# if "which xsel" "bind-key -t vi-copy y     copy-pipe 'xsel -bi'"
# if "which xsel" "bind-key -t vi-copy Enter copy-pipe 'xsel -bi'"
# if "which xsel" "bind-key ] run 'tmux set-buffer -- \"$(xsel -bo)\"; tmux paste-buffer'"

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-logging'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @plugin ' \
#     tmux-plugins/tpm \
#     tmux-plugins/tmux-sensible \
#     tmux-plugins/tmux-logging \
#     tmux-plugins/tmux-resurrect \
#     tmux-plugins/tmux-continuum \
# '

# continuum
set -g @continuum-restore 'on'

# resurrect
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-processes 'ssh'
set -g @continuum-boot 'on'
set -g @continuum-boot-options 'alacritty'
set -g @continuum-restore 'on'
set-option -g @resurrect-dir '/Users/chie.h/.tmux'
set-option -g @resurrect-save 'S'
set-option -g @resurrect-restore 'R'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run-shell '~/.tmux/plugins/tpm/tpm'

# prefix C-p Start logging.
#bind-key C-p pipe-pane -o '/bin/sh -c "while read -r LINE; do echo \"[\$(date +\"%%Y_%%m%%d_%%H%%M%%S_%%N\")] \${LINE}\" >> \/home/chiehayashida/.tmux/log/\$(date +%Y%m%d-%H%M%S)-#S-#I.#P.log; done "' \; display-message "Logging start."
# prefix C-o Stop logging
#bind-key C-o pipe-pane \; display-message "Logging end."
## prefix v Open new window. Logging always. (-n is set window name.)
bind-key v new-window -n 'logging...' \; pipe-pane -o '/bin/sh -c "while read -r LINE; do echo \"[\$(date +\"%%Y_%%m%%d_%%H%%M%%S_%%N\")] \${LINE}\" >> \/home/chiehayashida/.tmux/log/\$(date +%Y%m%d-%H%M%S)-#S-#I.#P.log; done "'

